{"ast":null,"code":"// API Configuration\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// Función para obtener todas las consultas desde la API\nexport async function getAllQueries() {\n  try {\n    const response = await fetch(`${API_BASE_URL}/consultas`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const consultas = await response.json();\n\n    // Convertir formato de la API al formato que espera el frontend\n    return consultas.map(consulta => ({\n      id: consulta.id,\n      title: consulta.titulo,\n      content: consulta.sql_codigo,\n      description: consulta.descripcion,\n      tags: consulta.etiquetas || [],\n      author: consulta.autor,\n      created_at: consulta.fecha_creacion,\n      favorite: consulta.favorito\n    }));\n  } catch (error) {\n    console.error('Error obteniendo consultas desde API:', error);\n    // Fallback a localStorage si la API no está disponible\n    const queries = localStorage.getItem(STORAGE_KEY);\n    return queries ? JSON.parse(queries) : [];\n  }\n}\n\n// Función para guardar consulta en la API\nexport const saveQuery = async query => {\n  try {\n    const consultaData = {\n      titulo: query.titulo,\n      descripcion: query.descripcion,\n      sql_codigo: query.sql_codigo,\n      etiquetas: query.etiquetas,\n      autor: query.autor\n    };\n    const response = await fetch(`${API_BASE_URL}/consultas`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(consultaData)\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const result = await response.json();\n\n    // Retornar en el formato que espera el frontend\n    return {\n      id: result.id,\n      title: query.titulo,\n      content: query.sql_codigo,\n      description: query.descripcion,\n      tags: query.etiquetas || [],\n      author: query.autor,\n      created_at: new Date().toISOString(),\n      favorite: false\n    };\n  } catch (error) {\n    console.error('Error guardando consulta en API:', error);\n    // Fallback a localStorage si la API no está disponible\n    return saveQueryLocal(query);\n  }\n};\n\n// Funciones de localStorage como fallback\nconst STORAGE_KEY = 'sqlQueries';\nconst saveQueryLocal = query => {\n  const queries = getQueries();\n  const newQuery = {\n    id: Date.now(),\n    title: query.titulo,\n    content: query.sql_codigo,\n    description: query.descripcion,\n    tags: query.etiquetas || [],\n    author: query.autor,\n    created_at: new Date().toISOString(),\n    favorite: false\n  };\n  queries.push(newQuery);\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(queries));\n  return newQuery;\n};\nexport const getQueries = () => {\n  const queries = localStorage.getItem(STORAGE_KEY);\n  return queries ? JSON.parse(queries) : [];\n};\nexport const isQueryValid = (title, content) => {\n  return title.trim() !== '' && content.trim() !== '';\n};\n\n// Función para buscar consultas en la API\nexport async function searchQueries(searchTerm) {\n  try {\n    const response = await fetch(`${API_BASE_URL}/consultas?search=${encodeURIComponent(searchTerm)}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const consultas = await response.json();\n\n    // Convertir formato de la API al formato que espera el frontend\n    return consultas.map(consulta => ({\n      id: consulta.id,\n      title: consulta.titulo,\n      content: consulta.sql_codigo,\n      description: consulta.descripcion,\n      tags: consulta.etiquetas || [],\n      author: consulta.autor,\n      created_at: consulta.fecha_creacion,\n      favorite: consulta.favorito\n    }));\n  } catch (error) {\n    console.error('Error buscando consultas desde API:', error);\n    return [];\n  }\n}","map":{"version":3,"names":["API_BASE_URL","getAllQueries","response","fetch","ok","Error","status","consultas","json","map","consulta","id","title","titulo","content","sql_codigo","description","descripcion","tags","etiquetas","author","autor","created_at","fecha_creacion","favorite","favorito","error","console","queries","localStorage","getItem","STORAGE_KEY","JSON","parse","saveQuery","query","consultaData","method","headers","body","stringify","result","Date","toISOString","saveQueryLocal","getQueries","newQuery","now","push","setItem","isQueryValid","trim","searchQueries","searchTerm","encodeURIComponent"],"sources":["C:/GitHub/QueryVault/sql-query-manager/src/components/Storage.js"],"sourcesContent":["// API Configuration\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// Función para obtener todas las consultas desde la API\nexport async function getAllQueries() {\n    try {\n        const response = await fetch(`${API_BASE_URL}/consultas`);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const consultas = await response.json();\n        \n        // Convertir formato de la API al formato que espera el frontend\n        return consultas.map(consulta => ({\n            id: consulta.id,\n            title: consulta.titulo,\n            content: consulta.sql_codigo,\n            description: consulta.descripcion,\n            tags: consulta.etiquetas || [],\n            author: consulta.autor,\n            created_at: consulta.fecha_creacion,\n            favorite: consulta.favorito\n        }));\n    } catch (error) {\n        console.error('Error obteniendo consultas desde API:', error);\n        // Fallback a localStorage si la API no está disponible\n        const queries = localStorage.getItem(STORAGE_KEY);\n        return queries ? JSON.parse(queries) : [];\n    }\n}\n\n// Función para guardar consulta en la API\nexport const saveQuery = async (query) => {\n    try {\n        const consultaData = {\n            titulo: query.titulo,\n            descripcion: query.descripcion,\n            sql_codigo: query.sql_codigo,\n            etiquetas: query.etiquetas,\n            autor: query.autor\n        };\n\n        const response = await fetch(`${API_BASE_URL}/consultas`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(consultaData)\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const result = await response.json();\n        \n        // Retornar en el formato que espera el frontend\n        return {\n            id: result.id,\n            title: query.titulo,\n            content: query.sql_codigo,\n            description: query.descripcion,\n            tags: query.etiquetas || [],\n            author: query.autor,\n            created_at: new Date().toISOString(),\n            favorite: false\n        };\n    } catch (error) {\n        console.error('Error guardando consulta en API:', error);\n        // Fallback a localStorage si la API no está disponible\n        return saveQueryLocal(query);\n    }\n};\n\n// Funciones de localStorage como fallback\nconst STORAGE_KEY = 'sqlQueries';\n\nconst saveQueryLocal = (query) => {\n    const queries = getQueries();\n    const newQuery = {\n        id: Date.now(),\n        title: query.titulo,\n        content: query.sql_codigo,\n        description: query.descripcion,\n        tags: query.etiquetas || [],\n        author: query.autor,\n        created_at: new Date().toISOString(),\n        favorite: false\n    };\n    queries.push(newQuery);\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(queries));\n    return newQuery;\n};\n\nexport const getQueries = () => {\n    const queries = localStorage.getItem(STORAGE_KEY);\n    return queries ? JSON.parse(queries) : [];\n};\n\nexport const isQueryValid = (title, content) => {\n    return title.trim() !== '' && content.trim() !== '';\n};\n\n// Función para buscar consultas en la API\nexport async function searchQueries(searchTerm) {\n    try {\n        const response = await fetch(`${API_BASE_URL}/consultas?search=${encodeURIComponent(searchTerm)}`);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const consultas = await response.json();\n        \n        // Convertir formato de la API al formato que espera el frontend\n        return consultas.map(consulta => ({\n            id: consulta.id,\n            title: consulta.titulo,\n            content: consulta.sql_codigo,\n            description: consulta.descripcion,\n            tags: consulta.etiquetas || [],\n            author: consulta.autor,\n            created_at: consulta.fecha_creacion,\n            favorite: consulta.favorito\n        }));\n    } catch (error) {\n        console.error('Error buscando consultas desde API:', error);\n        return [];\n    }\n}"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG,2BAA2B;;AAEhD;AACA,OAAO,eAAeC,aAAaA,CAAA,EAAG;EAClC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,YAAY,CAAC;IACzD,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC7D;IACA,MAAMC,SAAS,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;;IAEvC;IACA,OAAOD,SAAS,CAACE,GAAG,CAACC,QAAQ,KAAK;MAC9BC,EAAE,EAAED,QAAQ,CAACC,EAAE;MACfC,KAAK,EAAEF,QAAQ,CAACG,MAAM;MACtBC,OAAO,EAAEJ,QAAQ,CAACK,UAAU;MAC5BC,WAAW,EAAEN,QAAQ,CAACO,WAAW;MACjCC,IAAI,EAAER,QAAQ,CAACS,SAAS,IAAI,EAAE;MAC9BC,MAAM,EAAEV,QAAQ,CAACW,KAAK;MACtBC,UAAU,EAAEZ,QAAQ,CAACa,cAAc;MACnCC,QAAQ,EAAEd,QAAQ,CAACe;IACvB,CAAC,CAAC,CAAC;EACP,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;IAC7D;IACA,MAAME,OAAO,GAAGC,YAAY,CAACC,OAAO,CAACC,WAAW,CAAC;IACjD,OAAOH,OAAO,GAAGI,IAAI,CAACC,KAAK,CAACL,OAAO,CAAC,GAAG,EAAE;EAC7C;AACJ;;AAEA;AACA,OAAO,MAAMM,SAAS,GAAG,MAAOC,KAAK,IAAK;EACtC,IAAI;IACA,MAAMC,YAAY,GAAG;MACjBvB,MAAM,EAAEsB,KAAK,CAACtB,MAAM;MACpBI,WAAW,EAAEkB,KAAK,CAAClB,WAAW;MAC9BF,UAAU,EAAEoB,KAAK,CAACpB,UAAU;MAC5BI,SAAS,EAAEgB,KAAK,CAAChB,SAAS;MAC1BE,KAAK,EAAEc,KAAK,CAACd;IACjB,CAAC;IAED,MAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,YAAY,EAAE;MACtDqC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEP,IAAI,CAACQ,SAAS,CAACJ,YAAY;IACrC,CAAC,CAAC;IAEF,IAAI,CAAClC,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC7D;IAEA,MAAMmC,MAAM,GAAG,MAAMvC,QAAQ,CAACM,IAAI,CAAC,CAAC;;IAEpC;IACA,OAAO;MACHG,EAAE,EAAE8B,MAAM,CAAC9B,EAAE;MACbC,KAAK,EAAEuB,KAAK,CAACtB,MAAM;MACnBC,OAAO,EAAEqB,KAAK,CAACpB,UAAU;MACzBC,WAAW,EAAEmB,KAAK,CAAClB,WAAW;MAC9BC,IAAI,EAAEiB,KAAK,CAAChB,SAAS,IAAI,EAAE;MAC3BC,MAAM,EAAEe,KAAK,CAACd,KAAK;MACnBC,UAAU,EAAE,IAAIoB,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACpCnB,QAAQ,EAAE;IACd,CAAC;EACL,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD;IACA,OAAOkB,cAAc,CAACT,KAAK,CAAC;EAChC;AACJ,CAAC;;AAED;AACA,MAAMJ,WAAW,GAAG,YAAY;AAEhC,MAAMa,cAAc,GAAIT,KAAK,IAAK;EAC9B,MAAMP,OAAO,GAAGiB,UAAU,CAAC,CAAC;EAC5B,MAAMC,QAAQ,GAAG;IACbnC,EAAE,EAAE+B,IAAI,CAACK,GAAG,CAAC,CAAC;IACdnC,KAAK,EAAEuB,KAAK,CAACtB,MAAM;IACnBC,OAAO,EAAEqB,KAAK,CAACpB,UAAU;IACzBC,WAAW,EAAEmB,KAAK,CAAClB,WAAW;IAC9BC,IAAI,EAAEiB,KAAK,CAAChB,SAAS,IAAI,EAAE;IAC3BC,MAAM,EAAEe,KAAK,CAACd,KAAK;IACnBC,UAAU,EAAE,IAAIoB,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACpCnB,QAAQ,EAAE;EACd,CAAC;EACDI,OAAO,CAACoB,IAAI,CAACF,QAAQ,CAAC;EACtBjB,YAAY,CAACoB,OAAO,CAAClB,WAAW,EAAEC,IAAI,CAACQ,SAAS,CAACZ,OAAO,CAAC,CAAC;EAC1D,OAAOkB,QAAQ;AACnB,CAAC;AAED,OAAO,MAAMD,UAAU,GAAGA,CAAA,KAAM;EAC5B,MAAMjB,OAAO,GAAGC,YAAY,CAACC,OAAO,CAACC,WAAW,CAAC;EACjD,OAAOH,OAAO,GAAGI,IAAI,CAACC,KAAK,CAACL,OAAO,CAAC,GAAG,EAAE;AAC7C,CAAC;AAED,OAAO,MAAMsB,YAAY,GAAGA,CAACtC,KAAK,EAAEE,OAAO,KAAK;EAC5C,OAAOF,KAAK,CAACuC,IAAI,CAAC,CAAC,KAAK,EAAE,IAAIrC,OAAO,CAACqC,IAAI,CAAC,CAAC,KAAK,EAAE;AACvD,CAAC;;AAED;AACA,OAAO,eAAeC,aAAaA,CAACC,UAAU,EAAE;EAC5C,IAAI;IACA,MAAMnD,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,qBAAqBsD,kBAAkB,CAACD,UAAU,CAAC,EAAE,CAAC;IAClG,IAAI,CAACnD,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC7D;IACA,MAAMC,SAAS,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;;IAEvC;IACA,OAAOD,SAAS,CAACE,GAAG,CAACC,QAAQ,KAAK;MAC9BC,EAAE,EAAED,QAAQ,CAACC,EAAE;MACfC,KAAK,EAAEF,QAAQ,CAACG,MAAM;MACtBC,OAAO,EAAEJ,QAAQ,CAACK,UAAU;MAC5BC,WAAW,EAAEN,QAAQ,CAACO,WAAW;MACjCC,IAAI,EAAER,QAAQ,CAACS,SAAS,IAAI,EAAE;MAC9BC,MAAM,EAAEV,QAAQ,CAACW,KAAK;MACtBC,UAAU,EAAEZ,QAAQ,CAACa,cAAc;MACnCC,QAAQ,EAAEd,QAAQ,CAACe;IACvB,CAAC,CAAC,CAAC;EACP,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC3D,OAAO,EAAE;EACb;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module"}